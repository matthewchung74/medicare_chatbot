import os
from pathlib import Path

from google.adk.agents import Agent
from google.genai import types as genai_types
from google.adk.runners import Runner
from google.adk.sessions.in_memory_session_service import InMemorySessionService

# Standard Python libraries
import warnings
import logging
import os
import dotenv

dotenv.load_dotenv()

# --- Basic Configuration ---
warnings.filterwarnings("ignore") # Suppress common warnings
logging.basicConfig(level=logging.INFO) # Reduce log verbosity
logger = logging.getLogger(__name__)


logger.info("Initializing new session")
# Create session service and runner

def read_markdown_file() -> str:
    """Read the Medicare and You markdown file."""
    markdown_path = Path("medicare_and_you.md")
    if not markdown_path.exists():
        raise FileNotFoundError("medicare_and_you.md not found")
    return markdown_path.read_text()


def get_citation_tool(question: str) -> str:
    """Get the citation from the question."""
    # Implement logic to extract page number from question
    # For example, if question contains "page number", return "48"
    return "48"


# Main Medicare agent
root_agent = Agent(
    name="medicare_assistant",
    model="gemini-2.0-flash-lite",
    description="Helps users understand Medicare benefits using the Medicare & You handbook",
    instruction=f"""
    You are a caring Medicare guide. Your job is to help people understand their Medicare benefits 
    using information from the Medicare & You 2025 handbook. Fall back to google search if you don't have the information.

    Here is the complete Medicare & You 2025 handbook content that you should use to answer questions:

    {read_markdown_file()}

    When answering questions, always:
    
    1. Use only the handbook content provided above
    2. Explain concepts in simple, friendly terms
    3. Break down complex topics into easy steps
    4. If unsure, ask clarifying questions
    5. End with a note saying to refer tothe page number with the markdown link to the Medicare & You handbook, where the markdown would look like [Medicare & You Handbook](https://www.medicare.gov/publications/10050-medicare-and-you.pdf)
    6. No need to ask if the user has additional questions, just answer the question.
        
    Remember: Be warm, patient, and focus on making Medicare easy to understand.
    """,
    tools=[],
    generate_content_config=genai_types.GenerateContentConfig(
        temperature=0.1
        )
    )


# --- Agent Interaction Logic ---
async def get_agent_response(runner, user_query: str, user_id: str, session_id: str) -> tuple[str, str]:
    """
    Sends the user query to the ADK runner and processes the asynchronous events
    to extract the final response text and the name of the agent that produced it.
    """
    # Create the user message content in the format expected by ADK
    content = genai_types.Content(role='user', parts=[genai_types.Part(text=user_query)])

    # Initialize default response values
    final_response_text = "Agent did not produce a final response."
    final_response_author = "system" # Default author if none is found

    # Asynchronously iterate through events generated by the runner
    async for event in runner.run_async(user_id=user_id, session_id=session_id, new_message=content):
        # Check if the event is the final response from an agent
        if event.is_final_response():
            final_response_author = event.author if event.author else "unknown_agent" # Get the agent's name

            # Extract text content from the response parts
            if event.content and event.content.parts:
                text_parts = [getattr(part, 'text', '') for part in event.content.parts if hasattr(part, 'text')]
                final_response_text = " ".join(filter(None, text_parts)) # Join non-empty text parts
                if not final_response_text: # Handle case where parts exist but have no text
                        final_response_text = "(Agent returned empty text content)"

            # Handle cases where the final event indicates an error or specific action
            elif event.error_message:
                final_response_text = f"Agent Error: {event.error_message}"
                final_response_author = event.author if event.author else "error_handler"
            elif event.actions and event.actions.escalate:
                    final_response_text = f"Action Required: Escalated. Reason: {event.error_message or 'None specified'}"
                    final_response_author = event.author if event.author else "escalation_handler"
            # Fallback if none of the above conditions extracted text
            elif final_response_text == "Agent did not produce a final response.":
                    final_response_text = "(Final response received with no displayable content or error)"

            break # Stop processing events once the final response is found

    return final_response_text


